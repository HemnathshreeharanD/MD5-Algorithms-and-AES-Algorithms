import pandas as pd
import hashlib
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import padding
import time
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# Load dataset
dataset_path = '/Users/kishore/Desktop/mutualfunds.csv'
df = pd.read_csv(dataset_path)

# Drop columns that may not be relevant for your task
df = df.drop(['scheme_name', 'amc_name', 'fund_manager'], axis=1)

# Replace '-' with NaN and convert columns to numeric
df.replace('-', pd.NA, inplace=True)
df = df.apply(pd.to_numeric, errors='coerce')

# Fill NaN values with the mean of the respective columns
df.fillna(df.mean(), inplace=True)

# Map non-numeric categorical columns to numeric values
category_columns = ['rating', 'category', 'sub_category']
for col in category_columns:
    df[col] = pd.Categorical(df[col])
    df[col] = df[col].cat.codes

# Prepare data for classification
X = df.drop('risk_level', axis=1)
y = df['risk_level']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Function to calculate MD5 hash
def calculate_md5_hash(data):
    return hashlib.md5(data.encode()).hexdigest()

# Function to encrypt using AES
def encrypt_aes(key, data):
    key = key.encode('utf-8')[:32]  # Use only the first 32 bytes of the key
    if len(key) < 32:
        # If the key is less than 32 bytes, pad it with zeros
        key = key.ljust(32, b'\0')
    
    # Create a padding object
    padder = padding.PKCS7(128).padder()
    
    # Pad the data
    padded_data = padder.update(data.encode('utf-8')) + padder.finalize()

    # Encrypt the padded data
    cipher = Cipher(algorithms.AES(key), modes.ECB(), backend=default_backend())
    encryptor = cipher.encryptor()
    encrypted_data = encryptor.update(padded_data) + encryptor.finalize()
    return encrypted_data.hex()

# Function to evaluate accuracy
def evaluate_accuracy(model, X_test, y_test):
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    return accuracy

# Measure time taken for MD5
start_time = time.time()
md5_hash = calculate_md5_hash(str(df))
md5_time = time.time() - start_time

# Measure time taken for AES
key = 'ThisIsASecretKey123'  # Replace with your secret key
start_time = time.time()
encrypted_data = encrypt_aes(key, str(df))
aes_time = time.time() - start_time

# Train a simple classifier for evaluation (you may need to adjust this based on your specific task)
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Evaluate accuracy
accuracy = evaluate_accuracy(model, X_test, y_test)

# Print results
print(f'MD5 Hash: {md5_hash}')
print(f'AES Encrypted Data: {encrypted_data}')
print(f'Time taken for MD5: {md5_time:.4f} seconds')
print(f'Time taken for AES: {aes_time:.4f} seconds')
print(f'Accuracy: {accuracy:.4f}')
